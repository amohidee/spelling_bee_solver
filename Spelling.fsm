from cozmo_fsm import *
import math

import cv2
import matplotlib.pyplot as plt
from PIL import Image
import time


import os
import openai
import base64

destination = None
origin = None

letter_dict = {"t": 'CustomMarkerObj-15', "o": 'CustomMarkerObj-11', "p": 'CustomMarkerObj-14', "i": 'CustomMarkerObj-10', "a": 'CustomMarkerObj-13', 
"r": 'CustomMarkerObj-16', "y": 'CustomMarkerObj-12'}
"""
Diamonds3 is CustomMarkerObj-15, 
Diamonds2 is CustomMarkerObj-11, 
Hexagons4 is CustomMarkerObj-16, 
Circles2 is CustomMarkerObj-10, 
Hexagons3 is CustomMarkerObj-12, 
Triangles4 is CustomMarkerObj-13, 
Circles4 is CustomMarkerObj-14
"""
#change rrt.py compute_world_bounds xmin, xmax, ymin, ymax to + or - 100 instead of + or - 500.

word = "topiary"
index = 0



openai.api_key = os.getenv("OPENAI_API_KEY")

def encode_image(image_path):
  with open(image_path, "rb") as image_file:
    return base64.b64encode(image_file.read()).decode('utf-8')

client = openai.OpenAI()


query = """There are 7 letters in hexagons in the bottom middle of the phone.
           List the 7 letters in order. 
          Place the letter in the center of the other letters first. The letter in the center will have a slightly darker background than the other letters. Dont say anything else just return the 7 letters with a space in between each one."
          For example if the letters were A B C D E F G with C in the middle you would only output "C A B D E F G"
          Ignore the "type or click" that might appear above the letters.
"""



"""
Your custom_objs.py should look like this:
import cozmo
from cozmo.objects import CustomObject, CustomObjectMarkers, CustomObjectTypes

custom_marker_types = []
custom_container_types = []
custom_cube_types = []

async def declare_objects(robot):

    global custom_marker_types, custom_cube_types
    
    decl_marker = robot.world.define_custom_wall
    custom_marker_types = [
        CustomObjectTypes.CustomType01,
        CustomObjectTypes.CustomType03
        ]


    await decl_marker(CustomObjectTypes.CustomType01,
                      CustomObjectMarkers.Triangles2,
                      40, 40, 40, 40, True)

    await decl_marker(CustomObjectTypes.CustomType03,
                      CustomObjectMarkers.Hexagons2,
                      40, 40, 40, 40, True)
# Markers for containers
    custom_container_types = [
      CustomObjectTypes.CustomType04,
      CustomObjectTypes.CustomType05
      ]

    await decl_marker(CustomObjectTypes.CustomType04,
                      CustomObjectMarkers.Circles3,
                      40, 40, 40, 40, False)

    await decl_marker(CustomObjectTypes.CustomType05,
                      CustomObjectMarkers.Triangles3,
                      40, 40, 40, 40, False)



# Markers for cubes

    decl_cube = robot.world.define_custom_cube

    custom_cube_types = [
        CustomObjectTypes.CustomType10,
        CustomObjectTypes.CustomType11,
        CustomObjectTypes.CustomType12,
        CustomObjectTypes.CustomType13,
        CustomObjectTypes.CustomType14,
        CustomObjectTypes.CustomType15,
        CustomObjectTypes.CustomType16
        ]

    await decl_cube(CustomObjectTypes.CustomType10,
                    CustomObjectMarkers.Circles2,
                    50, 40, 40, True)
    await decl_cube(CustomObjectTypes.CustomType11,
                    CustomObjectMarkers.Diamonds2,
                    50, 40, 40, True)
    await decl_cube(CustomObjectTypes.CustomType12,
                    CustomObjectMarkers.Hexagons3,
                    50, 40, 40, True)
    await decl_cube(CustomObjectTypes.CustomType13,
                    CustomObjectMarkers.Triangles4,
                    50, 40, 40, True)
    await decl_cube(CustomObjectTypes.CustomType14,
                    CustomObjectMarkers.Circles4,
                    50, 40, 40, True)
    await decl_cube(CustomObjectTypes.CustomType15,
                    CustomObjectMarkers.Diamonds3,
                    50, 40, 40, True)
    await decl_cube(CustomObjectTypes.CustomType16,
                    CustomObjectMarkers.Hexagons4,
                    50, 40, 40, True)

"""


class Spelling(StateMachineProgram):
    def __init__(self):
        global destination
        destination = Pose(0,0,0,angle_z=degrees(0))
        super().__init__(cam_viewer=True,
                         worldmap_viewer=True,
                         path_viewer=True,
                         particle_viewer=True)
    def user_image(self,image,gray):
            self.robot.myimage = gray
    """
    class ShowScreen(StateNode):
        
        def start(self,event):
            global word
            def get_words(str):
                global word
                words = open("words.txt", "r")
                lines = words.readlines()

                answers = []

                for line in lines:
                    line = line.replace("\n", "").lower().strip()
                    is_word = True 
                    if "'" not in line:
                        if len(set(line)) <= 7 and len(set(line)) == len(line) and str[0] in line:
                            for c in line:
                                if c not in str:
                                    is_word = False
                            if is_word:
                                answers.append((len(line), line))



                sorted_list = sorted(answers, key=lambda x: x[0], reverse=True)
                print(sorted_list)

                # get top 5 or length of panagram list
                word = sorted_list[0][1]
                print(word)
                



            def get_response(filename):
                base64_image = encode_image(filename)
                response = client.chat.completions.create(
                    model="gpt-4-vision-preview",
                    messages = [
                        {"role": "user", "content": [
                            { "type": "text",
                            "text": query
                            },
                            { "type": "image_url",
                            "image_url": { "url" : f"data:image/jpeg;base64,{base64_image}"}
                            }
                        ]
                        }
                    ]
                )

                for choice in response.choices:
                    cleaned_response = re.sub(r'\\[\[\]\(\)]', '', choice.message.content)
                    print(cleaned_response)

                clean_input = cleaned_response.replace(" ", "").lower()
                print(clean_input)
                get_words(clean_input)



            def get_screen(img):
                np_img = np.array(img)
                ret, thresh = cv2.threshold(np_img, 127, 255,cv2.THRESH_OTSU)
                plt.figure()
                plt.imshow(thresh, cmap=plt.gray())
                plt.show(block=False)
                plt.pause(0.001)
                connectivity = 4  
                output = cv2.connectedComponentsWithStats(thresh)
                (numLabels, labels, stats, centroids) = output
                min_area = 90000

                for i in range(numLabels):
                    area = stats[i, cv2.CC_STAT_AREA]
                    

                    if area > 10000 and area < 90000:
                        x = stats[i, cv2.CC_STAT_LEFT]
                        y = stats[i, cv2.CC_STAT_TOP]
                        w = stats[i, cv2.CC_STAT_WIDTH]
                        h = stats[i, cv2.CC_STAT_HEIGHT]
                    
                        print(x)
                        print(y)
                        print(w)
                        print(h)
                        print()

                        crop_img = img[y:y+h, x:x+w]
                        plt.figure()
                        plt.imshow(crop_img)

                        plt.imshow(crop_img, cmap=plt.gray())
                        plt.show(block=False)
                        plt.pause(0.001)

                        if area < min_area:
                            ret_img = crop_img
                            min_area = area



                return ret_img
        
            super().start(event)
            img = self.robot.myimage
            new_img = get_screen(img)
            im = Image.fromarray(new_img)
            filename = str(time.time())
            filename.replace(".", "")
            filename += ".jpg"

            im.save(filename)
            get_response(filename)
    """

    class SetDest(StateNode):
        def start(self,event=None):
            global destination, origin
            super().start(event)
            # bug: robot sees the wall but its not in worldmap
            print(self.robot.world.world_map.objects.items())
            walls = []
            for name, obj in robot.world.world_map.objects.items():
                if isinstance(obj, WallObj):
                    walls.append(obj)
            print("WALLS")
            print(walls)
            print(walls[0])

            wall = walls[0]

            destination = Pose(wall.x - 150, wall.y + 200, 0, angle_z=degrees(0))

            origin = self.robot.world.particle_filter.pose

            
            a = destination
            print(a.position.x)
            print(a.position.y)
            print(a.position.z)

    class GoLetter(PilotToPose):
        def __init__(self):
            super().__init__(None, max_iter=10000)

        def start(self, event=None):
            global destination, index, word
            print("GO LETTER")
            print(f"robot pose = {self.robot.world.particle_filter.pose}")
            
            self.target_pose = destination

            print('Traveling to',self.target_pose)
            a = destination;
            destination = Pose(a.position.x, a.position.y - 150, a.position.z, angle_z=a.rotation.angle_z)
            super().start(event)
            index += 1
            if index >= len(word):
                self.post_failure()


    class GoBehindLetter(PilotToPose):
        def __init__(self):
            super().__init__(None, max_iter=10000)

        def start(self, event=None):
            global destination, origin, letter_dict, word, index
            print("GO BEHIND LETTER")
            print(f"robot pose = {self.robot.world.particle_filter.pose}")
            cube = self.robot.world.world_map.objects[letter_dict[word[index]]]
            print(cube)
            x = cube.x
            y = cube.y
            self.target_pose = Pose(x - 150, y, 0, angle_z=degrees(0))
            print('Traveling to',self.target_pose)
            super().start(event)

    $setup{
        launcher: StateNode()
        launcher =T(5)=> set_dest

        
        #show_screen : self.ShowScreen()
        #show_screen =T(5)=> set_dest

        set_dest: self.SetDest()
        set_dest =T(5)=> Turn(180) =C=> Turn(180) =C=> Turn(-90) =C=> Forward(300) =C=> Turn(90) =C=> StateNode() =T(1)=> behind_letter

        behind_letter: self.GoBehindLetter()
        behind_letter =C=>  go_letter

        go_letter: self.GoLetter()
        go_letter =C=>  Turn(180) =C=> StateNode() =T(1)=> behind_letter
        go_letter =F=> Say("All done!")
        

    }

from cozmo_fsm import *
import math

destination = None
origin = None

letter_dict = {"A": "6", "B": "7", "C": "10"}
#Diamonds 3 is id 6, Diamonds 2 is id 10, Hexagons 4 is id 11, Circles2 is id 9, Hexagons3 is id 7
word = "ABC"
index = 0

class Spelling(StateMachineProgram):
    def __init__(self):
        global destination
        destination = Pose(0,0,0,angle_z=degrees(0))
        super().__init__(cam_viewer=True,
                         worldmap_viewer=True,
                         path_viewer=True,
                         particle_viewer=True)

    class SetDest(StateNode):
        def start(self,event=None):
            global destination, origin
            super().start(event)
            # bug: robot sees the wall but its not in worldmap
            print(self.robot.world.world_map.objects.items())
            walls = []
            for name, obj in robot.world.world_map.objects.items():
                if isinstance(obj, WallObj):
                    walls.append(obj)
            print("WALLS")
            print(walls)
            print(walls[0])

            wall = walls[0]

            destination = Pose(wall.x - 150, wall.y, 0, angle_z=degrees(0))
            # origin = Pose(wall.x - 300, wall.y, 0, angle_z=degrees(180))

            origin = self.robot.world.particle_filter.pose

            
            a = destination
            print(a.position.x)
            print(a.position.y)
            print(a.position.z)

    class GoLetter(PilotToPose):
        def __init__(self):
            super().__init__(None, max_iter=10000)

        def start(self, event=None):
            global destination, index, word
            print("GO LETTER")
            print(f"robot pose = {self.robot.world.particle_filter.pose}")
            
            self.target_pose = destination

            print('Traveling to',self.target_pose)
            a = destination;
            destination = Pose(a.position.x, a.position.y - 150, a.position.z, angle_z=a.rotation.angle_z)
            super().start(event)
            index += 1
            if index >= len(word):
                self.post_failure()


    class GoBehindLetter(PilotToPose):
        def __init__(self):
            super().__init__(None, max_iter=10000)

        def start(self, event=None):
            global destination, origin, letter_dict, word, index
            print("GO BEHIND LETTER")
            print(f"robot pose = {self.robot.world.particle_filter.pose}")
            
            cube = self.robot.world.world_map.objects[letter_dict[word[index]]]
            print(cube)
            x = cube.x
            y = cube.y
            self.target_pose = Pose(x - 150, y, 0, angle_z=degrees(0))
            print('Traveling to',self.target_pose)
            super().start(event)

    $setup{
        launcher: StateNode()
        launcher =T(2)=> set_dest

        set_dest: self.SetDest()
        set_dest =N=> behind_letter

        behind_letter: self.GoBehindLetter()
        behind_letter =C=>  go_letter

        go_letter: self.GoLetter()
        go_letter =C=>  behind_letter
        go_letter =F=> Say("All done!")
        

    }
